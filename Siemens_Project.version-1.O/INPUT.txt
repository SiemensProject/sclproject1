 VAR_INPUT

    NegGain     {S7_visible:='false'; S7_edit := 'para'}
                : DigVal;        // 0= GainEff is positive, 1= GainEff is negative
    Gain        {Op_Level:='2';BLK_Jump:='1';S7_edit := 'para';  S7_m_c:= 'true'; S7_xm_c:='Value,true;'}
                : STRUCT
                  Value : REAL := 1.0;  // Value
                  ST    : BYTE := 16#FF;    // Signal Status
                END_STRUCT;      // Proportional gain
    NormPV      {S7_visible:='false'; S7_edit := 'para'; S7_xedit:='High,para;Low,para;'}
                : ScaVal;        // PV range for normalizing the proportional gain (Gain)
    NormMV      {S7_visible:='false'; S7_edit := 'para'; S7_xedit:='High,para;Low,para;'}
                : ScaVal;        // MV range for normalizing the proportional gain (Gain)

    TI          {Op_Level:='2';S7_edit := 'para'; S7_m_c:= 'true'; S7_xm_c:='Value,true;'}
                : STRUCT
                  Value : REAL := 100.0;    // Value
                  ST    : BYTE := 16#FF;    // Signal Status
                END_STRUCT;      // Integral time [s]
    IntHoldPos  {S7_visible:='false'}
                : DigVal;        // 1 = Integrator cannot run in positive direction
    IntHoldNeg  {S7_visible:='false'}
                : DigVal;        // 1 = Integrator cannot run in negative direction

    TD          {Op_Level:='2';S7_edit := 'para'; S7_m_c:= 'true'; S7_xm_c:='Value,true;'} //S7_xm_c:='Value'
                : AnaValFF;        // Differential time (derivative time) [s]
    DiffGain    {Op_Level:='2';S7_visible:='false'; S7_edit := 'para'; S7_m_c:= 'true'; S7_xm_c:='Value,true;'}
                : STRUCT
                  Value : REAL := 5.0;  // Value
                  ST    : BYTE := 16#80;    // Signal Status
                END_STRUCT;      // Gain of differentiator [1..10], DiffGain = TD / (time lag of D action)

    PropSel     {S7_visible:='false'}
                : BOOL := true;  // 1 = Activate P action
    DiffToFbk   {S7_visible:='false'; Op_Level:='2';S7_edit := 'para'; S7_m_c:='true'}
                : BOOL := false; // 1 = D action is moved to feedback path
    IntSel      {S7_visible:='false'}
                : BOOL := true;  // Select integral action
    DiffSel      {S7_visible:='false'}
                : BOOL := true;  // Select D action

    PropFacSP   {S7_visible:='false'; Op_Level:='2';S7_edit := 'para'; S7_m_c:='true'}
                : REAL := 1.0;   // P action to feedback path [0..1]: 0 = P action fully in feedback path
    DeadBand    {S7_visible:='false'; Op_Level:='2';S7_edit := 'para'; S7_m_c:='true'}
                : REAL := 0.0;   // Width of deadband

    ConZone     {S7_visible:='false'; Op_Level:='2';S7_edit := 'para'; S7_m_c:='true'}
                : REAL := 0.0;   // Width of control zone

    SP_LiOp     {S7_edit := 'para'; S7_contact:='true'}
                : DigVal;        // Select setpoint source via 1 = interconnection, 0 = operator
    SP_ExtOp    {S7_edit := 'para'; Op_Level:='1';S7_visible:='false'; S7_m_c:='true'; S7_string_1 := ''}
                : BOOL := false; // 1 = Select external setpoint (via operator)
    SP_IntOp    {S7_edit := 'para'; Op_Level:='1';S7_visible:='false'; S7_m_c:='true'; S7_string_1 := ''}
                : BOOL := false; // 1 = Select internal setpoint (via operator)
    SP_ExtLi    {S7_contact:='true'}
                : DigVal;        // 1 = Select external setpoint (via interconnection)
    SP_IntLi    {S7_contact:='true'}
                : DigVal;        // 1 = Select internal setpoint (via interconnection)

    SP_Int      {Op_Level:='1';S7_visible:='false'; S7_m_c:='true'; S7_dynamic:='true'}
                : REAL := 0.0;   // Internal setpoint for operation
    SP_InHiLim  {Op_Level:='2';S7_edit := 'para'; S7_visible:='false'; S7_m_c:='true'}
                : REAL := 100.0; // High limit of internal setpoint
    SP_InLoLim  {Op_Level:='2';S7_edit := 'para'; S7_visible:='false'; S7_m_c:='true'}
                : REAL := 0.0;   // Low limit of internal setpoint
    SP_Ext      {S7_dynamic:='true'; S7_contact:='true'}
                : AnaVal;        // External setpoint (to be interconnected)
    SP_ExHiLim  {S7_edit := 'para'; S7_m_c:= 'true'; S7_xm_c:='Value,true;'}
                : STRUCT
                  Value : REAL := 100.0;    // Value
                  ST    : BYTE := 16#80;    // Signal Status
                END_STRUCT;      // High limit for external setpoint
    SP_ExLoLim  {S7_edit := 'para'; S7_m_c:= 'true'; S7_xm_c:='Value,true;'}
                : AnaVal;        // Low limit for external setpoint

    SP_TrkPV    {Op_Level:='2';S7_edit := 'para'; S7_visible:='false'; S7_m_c:='true'}
                : BOOL := false; // 1 = Setpoint follows PV in manual mode and in tracking
    SP_TrkExt   {Op_Level:='2';S7_edit := 'para'; S7_visible:='false'; S7_m_c:='true'}
                : BOOL := true;  // 1 = Bumpless switchover from external to internal setpoint active

    SP_RateOn   {Op_Level:='1';S7_visible:='false'; S7_m_c:='true'}
                : BOOL := false; // 1= Activate limitation of setpoint gradients
    SP_RmpOn    {Op_Level:='1';S7_visible:='false'; S7_m_c:='true'}
                : BOOL := false; // 1= Activate setpoint ramp to target SP_RmpTarget
    SP_RmpModTime {Op_Level:='1';S7_visible:='false'; S7_m_c:='true'}
                : BOOL := false; // 1= Use time SP_RmpTime for ramp, 0= Use rates SP_UpRaLim, SP_DnRaLim

    SP_UpRaLim  {Op_Level:='1';S7_visible:='false'; S7_m_c:='true'}
                : REAL := 100.0; // Upward rate limit of setpoint
    SP_LiUpRaLim {S7_visible:='false'}
                : AnaValFF; // Linkable upward rate limit of setpoint
    SP_DnRaLim  {Op_Level:='1';S7_visible:='false'; S7_m_c:='true'}
                : REAL := 100.0; // Downward rate limit of setpoint
    SP_LiDnRaLim {S7_visible:='false'}
                : AnaValFF; // Linkable downward rate limit of setpoint
    SP_RmpTime   {Op_Level:='1';S7_visible:='false'; S7_m_c:='true'}
                : REAL := 0.0;   // Setpoint ramp time [s,min,h]
    SP_LiRmpTime {S7_visible:='false'}
                : AnaValFF; // Linkable setpoint ramp time [s,min,h]

    SP_RmpTarget {Op_Level:='1';S7_visible:='false'; S7_m_c:='true'; S7_dynamic:='true'}
                : REAL := 0.0;   // Setpoint ramp target

    PV          {S7_dynamic:='true'; S7_m_c:= 'true'; S7_xm_c:='Value,true;'; S7_xqc:='Value,true;'}
                : AnaVal;        // Process value (controlled variable)

    PV_AH_Lim   {Op_Level:='2';S7_visible:='false'; S7_edit:='para'; S7_m_c:='true'}
                : REAL := 95.0;  // PV alarm high limit
    PV_WH_Lim   {Op_Level:='2';S7_visible:='false'; S7_edit:='para'; S7_m_c:='true'}
                : REAL := 90.0;  // PV warning high limit
    PV_TH_Lim   {Op_Level:='2';S7_visible:='false'; S7_edit:='para'; S7_m_c:='true'}
                : REAL := 85.0;  // PV tolerance message high limit
    PV_TL_Lim   {Op_Level:='2';S7_visible:='false'; S7_edit:='para'; S7_m_c:='true'}
                : REAL := 15.0;  // PV tolerance message low limit
    PV_WL_Lim   {Op_Level:='2';S7_visible:='false'; S7_edit:='para'; S7_m_c:='true'}
                : REAL := 10.0;  // PV warning low limit
    PV_AL_Lim   {Op_Level:='2';S7_visible:='false'; S7_edit:='para'; S7_m_c:='true'}
                : REAL := 5.0;   // PV alarm low limit
    PV_Hyst     {Op_Level:='2';S7_visible:='false'; S7_edit:='para'; S7_m_c:='true'}
                : REAL := 1.0;   // Hysteresis for PV alarms, warnings and tolerance messages

    PV_AH_DC     {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for incoming PV high alarms [s]
    PV_AH_DG     {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for outgoing PV high alarms [s]
    PV_WH_DC     {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for incoming PV high warnings [s]
    PV_WH_DG     {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for outgoing PV high warnings [s]
    PV_TH_DC     {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for incoming PV high tolerance messages [s]
    PV_TH_DG     {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for outgoing PV high tolerance messages [s]

    PV_A_DC     {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for incoming PV high/low or only low alarms [s]
    PV_A_DG     {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for outgoing PV high/low or only low alarms [s]
    PV_W_DC     {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for incoming PV high/low or only low warnings [s]
    PV_W_DG     {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for outgoing PV high/low or only low warnings [s]
    PV_T_DC     {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for incoming PV high/low or only low tolerance messages [s]
    PV_T_DG     {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for outgoing PV high/low or only low tolerance messages [s]

    PV_AH_En    {S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable PV alarm high
    PV_WH_En    {S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable PV warning high
    PV_TH_En    {S7_edit := 'para'; S7_visible:='false'}
                : BOOL := false;  // 1 = Enable PV tolerance message high
    PV_TL_En    {S7_edit := 'para'; S7_visible:='false'}
                : BOOL := false;  // 1 = Enable PV tolerance message low
    PV_WL_En    {S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable PV warning low
    PV_AL_En    {S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable PV alarm low
    PV_AH_MsgEn {Op_Level:='2'; S7_m_c:= 'true'; S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable message for PV alarm high
    PV_WH_MsgEn {Op_Level:='2'; S7_m_c:= 'true'; S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable message for PV warning high
    PV_TH_MsgEn {Op_Level:='2'; S7_m_c:= 'true'; S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true; // 1 = Enable message for PV tolerance message high
    PV_TL_MsgEn {Op_Level:='2'; S7_m_c:= 'true'; S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true; // 1 = Enable message for tolerance message low
    PV_WL_MsgEn {Op_Level:='2'; S7_m_c:= 'true'; S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable message for PV warning low
    PV_AL_MsgEn {Op_Level:='2'; S7_m_c:= 'true'; S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable message for PV alarm low

    ER_Ext      {S7_visible:='false'; S7_dynamic:='true'}
                : AnaVal;        // External control error

    ER_AH_Lim   {Op_Level:='2';S7_visible:='false'; S7_edit:='para'; S7_m_c:='true'}
                : REAL := 100.0; // ER alarm high limit
    ER_AL_Lim   {Op_Level:='2';S7_visible:='false'; S7_edit:='para'; S7_m_c:='true'}
                : REAL := -100.0;// ER alarm low limit
    ER_Hyst     {Op_Level:='2';S7_visible:='false'; S7_edit:='para'; S7_m_c:='true'}
                : REAL := 1.0;   // Hysteresis for ER alarms

    ER_AH_DC    {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for incoming ER high alarms [s]
    ER_AH_DG    {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for outgoing ER high alarms [s]

    ER_A_DC     {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for incoming ER high/low or only low alarms [s]
    ER_A_DG     {S7_visible:='false'; S7_edit:='para'}
                : REAL := 0.0;   // Delay time for outgoing ER high/low or only low alarms [s]

    ER_AH_DFac  {Op_Level:='2'; S7_visible:='false'; S7_m_c:='true'}
                : REAL := 0.0; // ER alarm coming delay factor for positive SP jump [s/PV_Unit]
    ER_AL_DFac  {Op_Level:='2'; S7_visible:='false'; S7_m_c:='true'}
                : REAL := 0.0; // ER alarm coming delay factor for negative SP jump [s/PV_Unit]

    ER_AH_En    {S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable ER alarm high
    ER_AL_En    {S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable ER alarm low
    ER_AH_MsgEn {Op_Level:='2'; S7_m_c:= 'true'; S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable message for ER alarm high
    ER_AL_MsgEn {Op_Level:='2'; S7_m_c:= 'true'; S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable message for ER alarm low

    MV_Offset   {S7_visible:='false'; S7_contact:='true'}
                : REAL := 0.0;   // MV for ER= 0, operating point for controller without I action

    FFwd        {S7_visible:='false'; S7_m_c:= 'true'; S7_xm_c:='Value,true;'; S7_xqc:='Value,true;'; S7_dynamic:='true'; S7_contact:='true'; S7_xtrend:='Value,MV_OpScale.Low,MV_OpScale.High;'}
                : AnaVal;        // Input for additive disturbance variable compensation
    FFwdHiLim   {S7_visible:='false'; S7_edit := 'para'}
                : STRUCT
                  Value : REAL := 100.0;    // Value
                  ST    : BYTE := 16#80;    // Signal Status
                END_STRUCT;      // High limit for additive disturbance variable compensation
    FFwdLoLim   {S7_visible:='false'; S7_edit:='para'}
                : STRUCT
                  Value : REAL := -100.0;   // Value
                  ST    : BYTE := 16#80;    // Signal Status
                END_STRUCT;      // Low limit for additive disturbance variable compensation

    MV_TrkOn    {S7_dynamic:='true'; S7_contact:='true'}
                : DigVal;        // 1 = Tracking of manipulated variable MV
    MV_Trk      {S7_m_c:= 'true'; S7_xm_c:='Value,true;'; S7_xqc:='Value,true;'; S7_dynamic:='true'; S7_contact:='true'}
                : AnaVal;        // Tracking value for manipulated variable MV

    ModLiOp     {S7_edit := 'para'; S7_contact:='true'}
                : DigVal;        // Mode selection via 0 = Operator, 1 = Interconnection or SFC
    AutModOp    {S7_edit := 'para'; Op_Level:='1';S7_visible:='false'; S7_m_c:='true'; S7_string_1 := ''}
                : BOOL := false; // 1 = Automatic mode by operator (controlled by ModLiOp = 0)
    ManModOp    {S7_edit := 'para'; Op_Level:='1';S7_visible:='false'; S7_m_c:='true'; S7_string_1 := ''}
                : BOOL := true;  // 1 = Manual mode by operator (controlled by ModLiOp = 0)
    AutModLi    {S7_dynamic := 'true'; S7_contact:='true'}
                : DigVal;        // 1 = Automatic mode by interconnection or SFC (controlled by ModLiOp = 1)
    ManModLi    {S7_dynamic := 'true'}
                : DigVal;        // 1 = Manual mode by interconnection or SFC (controlled by ModLiOp = 1)

    AdvCoEn     {S7_visible:='false'}
                : DigVal;        // 1 = Enable program mode via interconnection
    AdvCoOn     {S7_edit := 'para'; Op_Level:='1';S7_visible:='false'; S7_m_c:='true'; S7_string_1 := ''}
                : BOOL := false; // 1 = Enable program mode via faceplate
    AdvCoModSP  {S7_visible:='false'}
                : BOOL := true;  // Type of program mode: 1 = Setpoint target, 0 = Manipulated variable target
    AdvCoMstrOn {S7_visible:='false'}
                : DigVal; // Activate (0-1) or deactivate (1-0) program via edge transition
    AdvCoMV     {S7_visible:='false'; S7_m_c:='true'}: REAL := 0; // Target value from the external program

    OosOp       {S7_edit := 'para'; Op_Level:='2';S7_visible:='false'; S7_m_c:='true'; S7_string_1 := ''}
                : BOOL := false; // 1 = Out of service by OS operation
    OosLi       {S7_dynamic:='true'}
                : DigVal;        // 1 = Out of service via interconnection or SFC (0-1 edge transition)

    MS_RelOp    {Op_Level:='3';S7_visible:='false'; S7_m_c:='true'}
                : BOOL := false; // 1 = Release for maintenance by operator

    OptimEn     {Op_Level:='2';S7_visible:='false'; S7_m_c:='true'}
                : BOOL := false; // 1 = Enable optimization of PID parameters by PID tuner
    OptimOcc    {S7_visible:='false'; S7_link:='false'}
                : BOOL := false; // 1 = Optimization running

    CPI_In      {S7_visible:='false'; BLK_Jump:='1';S7_edit := 'para'; S7_xqc:='Value,true;';S7_dynamic:='true';S7_m_c:= 'true'; S7_xm_c:='Value,true;'}
                : STRUCT
                  Value : REAL := 0.0;  // Value
                  ST    : BYTE := 16#78;    // Signal Status
                END_STRUCT;      // Input for control performance index calculated by related ConPerMon block
    RefStdDevIn {S7_visible:='false'}
                : STRUCT
                  Value : REAL := 0.0;  // Value
                  ST    : BYTE := 16#78;    // Signal Status
                END_STRUCT;      // Reference value of PV standard deviation in "good" state of control loop

    MV_Mean     : STRUCT
                  Value : REAL := 0.0;  // Value
                  ST    : BYTE := 16#78;    // Signal Status
                END_STRUCT;      // Mean value of MV in moving time window
    SettliTime : STRUCT
                  Value : REAL := 0.0;  // Value
                  ST    : BYTE := 16#78;    // Signal Status
                END_STRUCT;      // Settling time [s] of control loop as  caclulated by related ConPerMon block
    SettliFactor{S7_visible:='false'}
                : REAL:= 2; // Factor to increase settling time for deadband adaptation

    Man         {Op_Level:='1';S7_visible:='false'; S7_m_c:='true'}
                : REAL := 0.0;   // Operator input for manual setting of manipulated variable MV
    ManHiLim    {Op_Level:='2';S7_edit := 'para'; S7_visible:='false'; S7_m_c:='true'}
                : REAL := 100.0; // High limit for manipulated variable in manual mode
    ManLoLim    {Op_Level:='2';S7_edit := 'para'; S7_visible:='false'; S7_m_c:='true'}
                : REAL := 0.0;   // Low limit for manipulated variable in manual mode
    MV_HiLim    {S7_edit := 'para'}
                : STRUCT
                  Value : REAL := 100.0;    // Value
                  ST    : BYTE := 16#80;    // Signal Status
                END_STRUCT;      // Limit (high) for manipulated variable MV
    MV_LoLim    {S7_edit := 'para'}
                : AnaVal;        // Limit (low) for manipulated variable MV

    MV_ForOn    {S7_visible:='false'; S7_dynamic:='true'}
                : DigVal;        // Select bypassed MV supplied by input MV_Forced, e.g. for emergency shutdown
    MV_Forced   {S7_visible:='false'; S7_dynamic:='true'}
                : AnaVal;        // Bypassed value for MV, which is not limited and has highest priority

    SafePos     {S7_edit := 'para'; S7_visible:='false'}
                :BOOL := false; // 1= Rest position for MV is ManHiLim, 0= Rest position for MV is ManLoLim
    SafePos2    {S7_edit := 'para'; S7_visible:='false'}
                :INT := 0;      // 0= SafePos is valid, 1= Rest pos. is MV_SafePos, 2= Rest pos. is last MV (Stop)
    MV_SafePos  {S7_edit := 'para'; S7_dynamic:='true'}
                : AnaVal;       // MV rest position

    BypProt     {S7_edit := 'para'; S7_m_c := 'true';  S7_visible := 'false'}
                :BOOL := FALSE; // Bypass Protection in Sim Modes

    Intlock     {BLK_Jump:='1';S7_dynamic := 'true'; S7_m_c := 'true'; S7_xm_c := 'Value,true;'; S7_xqc := 'Value,true;'; S7_read_back:='never'}
                :STRUCT
                      Value  : BOOL := true;  // Value
                      ST     : BYTE := 16#FF;  // Signal Status
                END_STRUCT; // 0=Controller is Interlocked, 1=Controller is Not Interlocked
        StcDigValIntlock AT Intlock : STRUCT
                    Value : BOOL;   // Value
                    Bypass: BOOL;   // Hidden fill bit 1: Bypass active
                    ST    : BYTE;   // Signal Status
                              END_STRUCT;
    Intl_En     {S7_edit := 'para'; S7_visible := 'false'}
                :BOOL := TRUE; // 1=Interlock enabled, 0=Interlock disabled

    Rbk         {S7_dynamic:='true'}
                : AnaValFF;      // Readback value (only for display in faceplate)
    RbkWH_Lim   {Op_Level:='2';S7_visible:='false'; S7_edit:='para'; S7_m_c:='true'}
                : REAL := 100.0; // Rbk warning high limit
    RbkWL_Lim   {Op_Level:='2';S7_visible:='false'; S7_edit:='para'; S7_m_c:='true'}
                : REAL := 0.0;   // Rbk warning low limit
    RbkHyst     {Op_Level:='2';S7_visible:='false'; S7_edit:='para'; S7_m_c:='true'}
                : REAL := 1.0;   // Hysteresis for Rbk warnings
    RbkWH_En    {S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable Rbk warning high
    RbkWL_En    {S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable Rbk warning low
    RbkWH_MsgEn {Op_Level:='2'; S7_m_c:= 'true'; S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable message for Rbk warning high
    RbkWL_MsgEn {Op_Level:='2'; S7_m_c:= 'true'; S7_edit := 'para'; S7_visible:='false'}
                : BOOL := true;  // 1 = Enable message for Rbk warning low

    BypLiOp     {S7_visible:='false'; S7_edit := 'para'; S7_dynamic := 'true'}
                :DigVal;        // 1 = Bypass commands via interconnection
    BypPVOp     {S7_edit := 'para'; Op_Level:='1';S7_visible:='false'; S7_m_c:='true'; S7_string_1 := ''}
                :BOOL := false; // 1 = Select bypass PV (via operator)
    RstBypOp    {S7_edit := 'para'; Op_Level:='1';S7_visible:='false'; S7_m_c:='true'; S7_string_1 := ''}
                :BOOL := false; // 1 = Reset bypass PV (via operator)
    BypPVLi     {S7_visible:='false'}
                :DigVal;        // 1 = Select bypass PV (via interconnection)
    RstBypLi    {S7_visible:='false'}
                :DigVal;        // 1 = Reset bypass PV (via interconnection)
    BypPV       {S7_visible:='false'; S7_edit:='para'; S7_m_c:= 'true'; S7_xm_c:='Value,true;'} 
                :AnaValFF;   // Substitution value if block is in bypass
    BypLock     {S7_visible:='false'}
                :DigVal;        // 1 = Bypass activation or deactivation is locked for operator

    SimLiOp     {S7_edit := 'para'; S7_visible:='false'}
                :DigVal;       // Simulation on/off via 0 = Operator, 1 = Interconnection or SFC
    SimOnLi     {S7_visible:='false'}
                :DigVal;       // 1 = Simulation activated by interconnection or SFC (controlled by SimLiOp = 1)
    SimOn       {Op_Level:='3';S7_visible:='false'; S7_m_c:='true'}
                :BOOL := FALSE;  // 1 = Simulation activated
    SimPV       {Op_Level:='1';S7_visible:='false'; S7_m_c:= 'true'}
                :REAL := 0.0;    // Process value used for SimOn = 1
    SimPV_Li    {S7_visible:='false'}
                :AnaVal;    // Linkable simulation value PV
    SimRbk      {Op_Level:='1';S7_visible:='false'; S7_m_c:= 'true'}
                :REAL := 0.0;    // Readback value used for SimOn = 1
    SimRbkLi    {S7_visible:='false'}
                :AnaVal;    // Linkable simulation value Rbk

    PV_OpScale  {S7_m_c:='true'; S7_xm_c:='High,true;Low,true;'; S7_edit := 'para'; S7_xedit:='High,para;Low,para;'}
                : ScaVal;        // Limit values for scale in PV bar display of faceplate
    MV_OpScale  {S7_m_c:='true'; S7_xm_c:='High,true;Low,true;'; S7_edit := 'para'; S7_xedit:='High,para;Low,para;'}
                : ScaVal;        // Limit values for scale in MV bar display of faceplate
    PV_Unit     {S7_m_c:='true'; S7_edit:='para'; S7_unit:=''}
                : INT := 1001;   // Unit of measurement for the process value
    MV_Unit     {S7_m_c:='true'; S7_edit:='para'; S7_unit:=''}
                : INT := 1342;   // Unit of measurement for manipulated variable

    MV_ChnST    {S7_dynamic := 'true'; S7_m_c := 'true'; S7_xm_c := 'Value,true;'; S7_xqc := 'Value,true;'}
                :AnaValFF;      // Output channel state of MV

    SampleTime  {S7_visible:='false'; S7_link:='false'; S7_sampletime:='true'; S7_param:='false'}
                : REAL := 0.1;   // Sampling time [s] (assigned automatically)

    TimeFactor  {S7_visible:='false'; S7_edit := 'para'; S7_m_c :='true'}
                :INT := 0;       // Time Conversion Factor (0- Sec, 1- Min, 2- Hour)

    UserStatus  {S7_m_c:='true'; S7_visible:='false'}
                : BYTE := 16#0;  // Freely assignable bits for use in faceplate

    RunUpCyc    {S7_visible:='false'}
                : INT := 3;      // Number of cycles in startup; messages are suppressed during these cycles
    MsgEvID1    {S7_visible:='false'; S7_link:='false'; S7_param :='false'; S7_server:='alarm_archiv'; S7_a_type:='alarm_8p'}
                : DWORD := 16#00000000; //Message Event ID
    MsgEvID2    {S7_visible:='false'; S7_link:='false'; S7_param :='false'; S7_server:='alarm_archiv'; S7_a_type:='alarm_8p'}
                : DWORD := 16#00000000; //Message Event ID

    BatchEn     {S7_visible:='false'}
                : BOOL := false; // 1 = Enable allocation for batch control
    BatchID     {S7_visible:='false'; S7_m_c:='true'}
                : DWORD := 0;    // Batch number
    BatchName   {S7_visible:='false'; S7_m_c:='true'}
                : STRING[32] := ''; // Batch name
    StepNo      {S7_visible:='false'; S7_m_c:='true'}
                : DWORD := 0;    // Batch step number
    Occupied    {S7_visible:='false'}
                : BOOL := false; // 1 = Occupied by batch control

    CSF         {S7_dynamic:='true'}
                : DigVal;        // 1 = External error (control system error)
    ExtMsg1     {S7_visible:='false'}
                : DigVal;        // 1 = Binary input for freely selectable message 1
    ExtMsg2     {S7_visible:='false'}
                : DigVal;        // 1 = Binary input for freely selectable message 2
    ExtMsg3     {S7_visible:='false'}
                : DigVal;        // 1 = Binary input for freely selectable message 3
    ExtMsg4     {S7_visible:='false'}
                : DigVal;        // 1 = Binary input for freely selectable message 4

    MsgLock     {S7_visible:='false'}
                : DigVal;        // Inhibit process message

    ExtVa106    {S7_visible:='false'}
                : ANY;           // Associated value 6 for messages (MsgEvID1)
    ExtVa107    {S7_visible:='false'}
                : ANY;           // Associated value 7 for messages (MsgEvID1)
    ExtVa209    {S7_visible:='false'}
                : ANY;           // Associated value 9 for messages (MsgEvID2)
    ExtVa210    {S7_visible:='false'}
                : ANY;           // Associated value 10 for messages (MsgEvID2)

    OS_Perm     {S7_visible:='false'}
                : STRUCT
                      Bit0: BOOL :=1; // 1= Operator can switch into automatic mode AutModOp
                      Bit1: BOOL :=1; // 1= Operator can switch into manual mode ManModOp
                      Bit2: BOOL :=1; // 1= Operator can switch into "out of service" mode OosOp
                      Bit3: BOOL :=1; // 1= Operator can switch into program mode AdvCoOn
                      Bit4: BOOL :=1; // 1= Operator can switch the setpoint to external SP_ExtOp
                      Bit5: BOOL :=1; // 1= Operator can switch the setpoint to internal SP_IntOp
                      Bit6: BOOL :=1; // 1= Operator can change the internal setpoint SP_Int
                      Bit7: BOOL :=1; // 1= Operator can change the manual parameter Man
                      Bit8: BOOL :=1; // 1= Operator can change setpoint high limit SP_InHiLim
                      Bit9: BOOL :=1; // 1= Operator can change setpoint low limit SP_InLoLim
                     Bit10: BOOL :=1; // 1= Operator can change high limit for parameter Man ManHiLim
                     Bit11: BOOL :=1; // 1= Operator can change low limit for parameter Man ManLoLim
                     Bit12: BOOL :=1; // 1= Operator can use the setpoint's gradient limitation funct. SP_RateOn
                     Bit13: BOOL :=1; // 1= Operator can change the setpoint's upward rate limit SP_UpRaLim
                     Bit14: BOOL :=1; // 1= Operator can change the setpoint's downward rate limit SP_DnRaLim
                     Bit15: BOOL :=1; // 1= Operator can change ramp mode (time or gradient value) SP_RmpModTime
                     Bit16: BOOL :=1; // 1= Operator can change the ramp time SP_RmpTime
                     Bit17: BOOL :=1; // 1= Operator can change the target setpoint in ramp function SP_RmpTarget
                     Bit18: BOOL :=1; // 1= Operator can activate the setpoint ramp function SP_RmpOn
                     Bit19: BOOL :=1; // 1= Operator can enable the PID optimization function OptimEn
                     Bit20: BOOL :=1; // 1= Operator can activate the tracking of setpoint in manual mode SP_TrkPV
                     Bit21: BOOL :=1; // 1= Operator can activate bumpless changeover external/internal SP_TrkExt
                     Bit22: BOOL :=1; // 1= Operator can change the gain parameter Gain
                     Bit23: BOOL :=1; // 1= Operator can change the integral time parameter TI
                     Bit24: BOOL :=1; // 1= Operator can change the derivative time parameter TD
                     Bit25: BOOL :=1; // 1= Operator can change the derivative gain parameter DiffGain
                     Bit26: BOOL :=1; // 1= Operator can change the deadband parameter DeadBand
                     Bit27: BOOL :=1; // 1= Operator can change the control zone parameter ConZone
                     Bit28: BOOL :=1; // 1= Operator can change the derivative gain parameter ER_AH_DFac
                     Bit29: BOOL :=1; // 1= Operator can change the derivative gain parameter ER_AL_DFac
                     Bit30: BOOL :=1; // Reserved
                     Bit31: BOOL :=1; // Reserved
                END_STRUCT; // Operator permissions
    ArrOS_Perm AT OS_Perm : ARRAY[0..3] OF BYTE;
    OS1Perm     {S7_visible:='false'}
                : STRUCT
                      Bit0: BOOL :=1; // 1 = Operator can change the process value high alarm limit PV_AH_Lim
                      Bit1: BOOL :=1; // 1 = Operator can change the process value high warning limit PV_WH_Lim
                      Bit2: BOOL :=1; // 1 = Operator can change the process value high tolerance limit PV_TH_Lim
                      Bit3: BOOL :=1; // 1 = Operator can change the process value hysteresis PV_Hyst
                      Bit4: BOOL :=1; // 1 = Operator can change the process value low tolerance limit PV_TL_Lim
                      Bit5: BOOL :=1; // 1 = Operator can change the process value low warning limit PV_WL_Lim
                      Bit6: BOOL :=1; // 1 = Operator can change the process value low alarm limit PV_AL_Lim
                      Bit7: BOOL :=1; // 1 = Operator can change the control error high alarm limit ER_AH_Lim
                      Bit8: BOOL :=1; // 1 = Operator can change the control error message hysteresis ER_Hyst
                      Bit9: BOOL :=1; // 1 = Operator can change the control error low alarm limit ER_AL_Lim
                     Bit10: BOOL :=1; // 1 = Operator can change the position feedback high warning limit RbkWH_Lim
                     Bit11: BOOL :=1; // 1 = Operator can change the position feedback message hysteresis RbkHyst
                     Bit12: BOOL :=1; // 1 = Operator can change the position feedback low warning limit RbkWL_Lim
                     Bit13: BOOL :=1; // Reserved
                     Bit14: BOOL :=1; // 1 = Operator can activate bypass functionality
                     Bit15: BOOL :=1; // 1 = Operator can deactivate bypass functionality
                     Bit16: BOOL :=1; // 1 = Operator can activate the simulation function SimOn
                     Bit17: BOOL :=1; // 1 = Operator can activate the maintenance release function MS_RelOp
                     Bit18: BOOL :=1; // 1 = Operator can activate/deactivate message over PV_AH_MsgEn
                     Bit19: BOOL :=1; // 1 = Operator can activate/deactivate message over PV_WH_MsgEn
                     Bit20: BOOL :=1; // 1 = Operator can activate/deactivate message over PV_TH_MsgEn
                     Bit21: BOOL :=1; // 1 = Operator can activate/deactivate message over PV_TL_MsgEn
                     Bit22: BOOL :=1; // 1 = Operator can activate/deactivate message over PV_WL_MsgEn
                     Bit23: BOOL :=1; // 1 = Operator can activate/deactivate message over PV_AL_MsgEn
                     Bit24: BOOL :=1; // 1 = Operator can activate/deactivate message over ER_AH_MsgEn
                     Bit25: BOOL :=1; // 1 = Operator can activate/deactivate message over ER_AL_MsgEn
                     Bit26: BOOL :=1; // 1 = Operator can activate/deactivate message over RbkWH_MsgEn
                     Bit27: BOOL :=1; // 1 = Operator can activate/deactivate message over RbkWL_MsgEn
                     Bit28: BOOL :=1; // 1 = Operator can change the simulation value SimPV
                     Bit29: BOOL :=1; // 1 = Operator can change the simulation value SimRbk
                     Bit30: BOOL :=1; // 1= Operator can activate D action to feedback path DiffToFbk
                     Bit31: BOOL :=1; // 1= Operator can change P action to feedback path PropFacSP
                END_STRUCT; // Operator Permissions 1
    ArrOS1Perm AT OS1Perm : ARRAY[0..3] OF BYTE;

    OpSt_In     {BLK_Jump:='1'; S7_visible:='false'}
                :DWORD := 16#0;  // Enabled operator station

    Feature     {S7_visible:='false'}
                : STRUCT
                      Bit0: BOOL :=0; // 0 = Start up with defined initializing in OB100; 1 = keep last stored values
                      Bit1: BOOL :=0; // 1 = OosLi can switch to Out of Service (the block has to be in manual mode)
                      Bit2: BOOL :=0; // 1 = All linkable command inputs reset after evaluation
                      Bit3: BOOL :=0; // Reserved
                      Bit4: BOOL :=0; // 0 = Button mode; 1 = Switch mode: depend on SP_ExtLi AutModLi
                      Bit5: BOOL :=0; // 1 = Changes Signal status of outputs in OOS to 16#60
                      Bit6: BOOL :=0; // 1=Ramp rate is calculated with actual start point and actual ramp target value
                      Bit7: BOOL :=0; // Reserved
                      Bit8: BOOL :=0; // 1 = Separate delay times for each PV, ER alarm
                      Bit9: BOOL :=0; // 1 = Substitution value is activ if block is in bypass
                     Bit10: BOOL :=0; // Reserved
                     Bit11: BOOL :=0; // 1 = Gradient limitation with time duration
                     Bit12: BOOL :=0; // 1 = Control zone with preset I-part
                     Bit13: BOOL :=0; // 1 = Control zone with frozen I-part
                     Bit14: BOOL :=0; // 1 = External control error on
                     Bit15: BOOL :=0; // 1 = The controller goes to the rest position during "Out of service" mode
                     Bit16: BOOL :=0; // 1 = The controller goes to the rest position during startup
                     Bit17: BOOL :=0; // Reserved
                     Bit18: BOOL :=0; // 1 = Changeover to automatic mode with P action jump
                     Bit19: BOOL :=0; // Reserved
                     Bit20: BOOL :=0; // Reserved
                     Bit21: BOOL :=0; // Reserved
                     Bit22: BOOL :=0; // 1 = Enable message state actualization
                     Bit23: BOOL :=0; // 1 = SP follows PV in open loop has no priority over SP_Ext and SP limits
                     Bit24: BOOL :=0; // 1 = Local authorization active
                     Bit25: BOOL :=0; // 1 = Suppress all messages if MsgLock = 1
                     Bit26: BOOL :=0; // 1 = Reset switching points if switching to Out of Service
                     Bit27: BOOL :=0; // Reserved
                     Bit28: BOOL :=0; // 1 = Disable switching points if MsgLock =1
                     Bit29: BOOL :=0; // 1 = Signal value =0 (0 active) if limit is violated
                     Bit30: BOOL :=0; // 1 = Apply the dynamically deactivating of deadband during the PV settling
                     Bit31: BOOL :=0; // 1 = Limits disabled in faceplate
                END_STRUCT; // Status of various features

    Feature2    {S7_visible:='false'}
                : STRUCT
                      Bit0: BOOL :=0; // Reserved
                      Bit1: BOOL :=0; // Reserved
                      Bit2: BOOL :=0; // 1 = Separate evaluation of bypassed and simulated interlock signals
                      Bit3: BOOL :=0; // Reserved
                      Bit4: BOOL :=0; // Reserved
                      Bit5: BOOL :=0; // 1=Ignore bad signal state in interlock signals
                      Bit6: BOOL :=0; // Reserved
                      Bit7: BOOL :=0; // Reserved
                      Bit8: BOOL :=0; // Reserved
                      Bit9: BOOL :=0; // Reserved
                     Bit10: BOOL :=0; // Reserved
                     Bit11: BOOL :=0; // 1 = Suppress MsgLock and "Out of service" for connected message block
                     Bit12: BOOL :=0; // Reserved
                     Bit13: BOOL :=0; // Reserved
                     Bit14: BOOL :=0; // Reserved
                     Bit15: BOOL :=0; // Reserved
                     Bit16: BOOL :=0; // Reserved
                     Bit17: BOOL :=0; // Reserved
                     Bit18: BOOL :=0; // Reserved
                     Bit19: BOOL :=0; // Reserved
                     Bit20: BOOL :=0; // Reserved
                     Bit21: BOOL :=0; // Reserved
                     Bit22: BOOL :=0; // Reserved
                     Bit23: BOOL :=0; // Reserved
                     Bit24: BOOL :=0; // Reserved
                     Bit25: BOOL :=0; // Reserved
                     Bit26: BOOL :=0; // Reserved
                     Bit27: BOOL :=0; // Reserved
                     Bit28: BOOL :=0; // Reserved
                     Bit29: BOOL :=0; // Reserved
                     Bit30: BOOL :=0; // Reserved
                     Bit31: BOOL :=0; // Reserved
                END_STRUCT; // Status of various features

    SelFp1      {BLK_Jump:='1';S7_visible:='false'}
                :ANY; // 1 = Call an additional faceplate?in standard view

    SelFp2      {BLK_Jump:='1';S7_visible:='false'}
                :ANY; // 1 = Call an additional faceplate?in preview view

    EventTsIn   {S7_visible:='false'}
                :ANY; // Timestamp parameters
    anyEvtTsIn AT EventTsIn:   Struct_ANY;

    EnAcquire   {S7_dynamic := 'true'; S7_param := 'true'}
                : BOOL := TRUE; //Reserved

    AcquireId   {S7_visible := 'false'; S7_m_c := 'true'}
                : DWORD; //Reserved
                
    AcRequest   {S7_visible := 'false'; S7_contact := 'true'; S7_enum := 'ES_AcquireTypes'}
                : BYTE;   //Reserved
                
    AcPriority  {S7_visible := 'false'; S7_contact := 'true'}
                : BYTE;   //Reserved
                                
    AcWaitTmMax {S7_visible := 'false'; S7_contact := 'true'}
                : REAL;   //Reserved
                
    AcSafeOrMsk {S7_visible := 'false'; S7_contact := 'true'}
                : DWORD;  //Reserved
                
    AcSafeNotMsk {S7_visible := 'false'; S7_contact := 'true'}
                : DWORD;  //Reserved
                
    AcAcquireId {S7_visible := 'false'; S7_contact := 'true'}
                : DWORD;  //Reserved

